{"version":3,"sources":["DataTable.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["DataTable","this","props","winners","map","item","winner","date","id","react_default","a","createElement","key","className","Table","bordered","renderData","PureComponent","Game","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","timer","_this$state","state","squares","computerScores","userScores","clicked","highlight","_this$props","field","userName","onShowMessage","halfSquares","toFixed","Math","floor","random","length","finishGame","name","color","clearInterval","intervalId","myRef","style","backgroundColor","i","splice","setState","undefined","Array","from","x","index","delay","setInterval","prevProps","_this$props2","start","_this$state2","_this2","toConsumableArray","flexBasis","concat","ref","onClick","handleClick","maxWidth","renderSquares","Component","App","selectMode","message","buttonText","settings","disabled","handleChange","event","target","value","defineProperty","showMessage","Date","year","getFullYear","month","getMonth","day","getDate","hours","getHours","minutes","getMinutes","formattedDate","axios","post","headers","Accept","Content-Type","then","res","console","log","getWinners","get","crossdomain","Access-Control-Allow-Origin","data","_this3","e","preventDefault","elem","_settings$elem","_this4","Container","Form","onSubmit","Row","form","Col","md","Input","type","onChange","placeholder","Button","src_Game","src_DataTable","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4b7818f4.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\nimport { Table } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\n\nclass DataTable extends PureComponent {\n  renderData() {\n    const { winners } = this.props;\n    return winners.map(item => {\n      const { winner, date, id } = item;\n      return (\n        <tr key={id}>\n          <td>{winner}</td>\n          <td>{date}</td>\n        </tr>\n      );\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"dataTable\">\n        <h2>Leader Board</h2>\n        <Table bordered>\n          <tbody>{this.renderData()}</tbody>\n        </Table>\n      </div>\n    );\n  }\n}\n\nDataTable.propTypes = {\n  winners: PropTypes.array,\n};\n\nexport default DataTable;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.myRef = [];\n    this.state = {\n      squares: Array.from(\n        Array(props.field * props.field),\n        (x, index) => index\n      ),\n      userScores: 0,\n      computerScores: 0,\n      highlight: undefined,\n      clicked: false\n    };\n  }\n  componentDidMount() {\n    const { delay } = this.props;\n    this.intervalId = setInterval(this.timer, delay);\n  }\n  componentDidUpdate(prevProps) {\n    const { start, delay, field } = this.props;\n    if (start && start !== prevProps.start) {\n      this.intervalId = setInterval(this.timer, delay);\n      this.setState({\n        squares: Array.from(Array(field * field), (x, index) => index),\n        computerScores: 0,\n        userScores: 0,\n        highlight: undefined\n      });\n      for (let i = 0; i < field * field; i++) {\n        this.myRef[i].style.backgroundColor = \"white\";\n      }\n    }\n  }\n  componentWillUnmount() {\n    clearInterval(this.intervalId);\n  }\n  timer = () => {\n    const {\n      squares,\n      computerScores,\n      userScores,\n      clicked,\n      highlight\n    } = this.state;\n    const { field, userName, onShowMessage } = this.props;\n    const halfSquares = ((field * field) / 2).toFixed();\n    const item = squares[Math.floor(Math.random() * squares.length)];\n\n    const finishGame = (name, color) => {\n      clearInterval(this.intervalId);\n      this.myRef[highlight].style.backgroundColor = color;\n      onShowMessage(name);\n    };\n    if (computerScores >= halfSquares) {\n      finishGame(\"Computer\", \"red\");\n    } else if (userScores >= halfSquares) {\n      finishGame(userName, \"green\");\n    } else {\n      this.myRef[item].style.backgroundColor = \"blue\";\n      for (var i = 0; i < squares.length; i++) {\n        if (squares[i] === item) {\n          squares.splice(i, 1);\n        }\n      }\n      this.setState({\n        highlight: item,\n        squares,\n        clicked: false\n      });\n      if (!clicked) {\n        this.setState({\n          computerScores: computerScores + 1\n        });\n        if (highlight !== undefined) {\n          this.myRef[highlight].style.backgroundColor = \"red\";\n        }\n      }\n    }\n  };\n\n  handleClick(index) {\n    const { userScores, highlight } = this.state;\n    if (index === highlight) {\n      this.myRef[index].style.backgroundColor = \"green\";\n      this.setState({\n        userScores: userScores + 1,\n        clicked: true\n      });\n    }\n  }\n  renderSquares(field) {\n    let squares = [...Array(field * field)];\n    return squares.map((item, index) => {\n      return (\n        <div\n          className=\"game-cell\"\n          key={index}\n          style={{ flexBasis: `${100 / field}%` }}\n          ref={ref => {\n            this.myRef[index] = ref;\n            return true;\n          }}\n          onClick={() => this.handleClick(index)}\n        >\n          <div className=\"game-item\" />\n        </div>\n      );\n    });\n  }\n  render() {\n    const { field } = this.props;\n    return (\n      <div\n        className=\"game-container\"\n        style={{\n          maxWidth: `${\n            field === 5 ? \"320px\" : field === 10 ? \"480px\" : \"640px\"\n          }`\n        }}\n      >\n        {this.renderSquares(field)}\n      </div>\n    );\n  }\n}\n\nGame.propTypes = {\n  delay: PropTypes.number,\n  start: PropTypes.bool,\n  field: PropTypes.number,\n  userName: PropTypes.string,\n  onShowMessage: PropTypes.func\n};\n\nexport default Game;\n","import React, { Component } from \"react\";\nimport { Container, Row, Col, Form, Button, Input } from \"reactstrap\";\nimport axios from \"axios\";\n\nimport DataTable from \"./DataTable\";\nimport Game from \"./Game\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    userName: \"\",\n    selectMode: \"\",\n    message: \"\",\n    buttonText: \"Play\",\n    winners: [],\n    settings: {},\n    field: undefined,\n    delay: undefined,\n    start: false,\n    disabled: false\n  };\n\n  componentDidMount() {\n    this.getWinners();\n    axios\n      .get(`https://starnavi-frontend-test-task.herokuapp.com/game-settings`, {\n        crossdomain: true,\n        headers: { \"Access-Control-Allow-Origin\": \"*\" }\n      })\n      .then(res => {\n        const settings = res.data;\n        this.setState({ settings });\n      });\n  }\n\n  getWinners() {\n    axios\n      .get(`https://starnavi-frontend-test-task.herokuapp.com/winners`, {\n        crossdomain: true,\n        headers: { \"Access-Control-Allow-Origin\": \"*\" }\n      })\n      .then(res => {\n        const winners = res.data;\n        this.setState({ winners });\n      });\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    const { userName, selectMode, settings } = this.state;\n    if (userName !== \"\" && selectMode !== \"\") {\n      for (let elem in settings) {\n        if (elem === selectMode) {\n          const { field, delay } = settings[elem];\n          this.setState({\n            field,\n            delay,\n            start: true,\n            disabled: true,\n            message: \"\"\n          });\n        }\n      }\n    }\n  }\n\n  handleChange = event => {\n    const { target } = event;\n    const { name, value } = target;\n    this.setState({\n      [name]: value\n    });\n  };\n\n  showMessage = name => {\n    const date = new Date();\n    const year = date.getFullYear();\n    const month = date.getMonth();\n    const monthsNamed = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\"\n    ];\n    const day = date.getDate();\n    const hours = date.getHours();\n    const minutes = date.getMinutes();\n    const formattedDate = `${hours}:${minutes}; ${day} ${\n      monthsNamed[month]\n    } ${year}`;\n    this.setState({\n      message: `${name} won`,\n      buttonText: \"Play Again\",\n      start: false,\n      disabled: false\n    });\n    axios\n      .post(\n        `https://starnavi-frontend-test-task.herokuapp.com/winners`,\n        { winner: name, date: formattedDate },\n        {\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\"\n          }\n        }\n      )\n      .then(res => {\n        console.log(res);\n        this.getWinners();\n      });\n  };\n\n  render() {\n    const {\n      winners,\n      message,\n      field,\n      delay,\n      userName,\n      start,\n      buttonText,\n      disabled\n    } = this.state;\n    return (\n      <div className=\"App\">\n        <Container>\n          <Form onSubmit={e => this.onSubmit(e)} className=\"mainForm\">\n            <Row form>\n              <Col md={5} className=\"mb-2\">\n                <Input\n                  type=\"select\"\n                  name=\"selectMode\"\n                  onChange={e => this.handleChange(e)}\n                >\n                  <option value=\"\">Pick game mode</option>\n                  <option value=\"easyMode\">Easy</option>\n                  <option value=\"normalMode\">Normal</option>\n                  <option value=\"hardMode\">Hard</option>\n                </Input>\n              </Col>\n              <Col md={5} className=\"mb-2\">\n                <Input\n                  type=\"text\"\n                  name=\"userName\"\n                  value={userName}\n                  placeholder=\"Enter your name\"\n                  onChange={e => this.handleChange(e)}\n                />\n              </Col>\n              <Col md={2}>\n                <Button disabled={disabled}>{buttonText}</Button>\n              </Col>\n            </Row>\n          </Form>\n          <Row>\n            <Col>\n              <div className=\"message\">\n                {message.length ? <h3>{message}</h3> : null}\n              </div>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              {field !== undefined || delay !== undefined ? (\n                <Game\n                  field={field}\n                  delay={delay}\n                  userName={userName}\n                  onShowMessage={this.showMessage}\n                  start={start}\n                />\n              ) : null}\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <DataTable winners={winners} />\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}