{"version":3,"sources":["DataTable.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["DataTable","this","props","winners","map","item","winner","date","id","react_default","a","createElement","key","console","log","className","Table","bordered","renderData","Component","Game","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","timer","_this$state","state","squares","computerScores","userScores","clicked","highlight","_this$props","field","userName","onShowMessage","halfSquares","toFixed","Math","floor","random","length","finishGame","name","color","clearInterval","intervalId","myRef","style","backgroundColor","concat","i","splice","setState","undefined","Array","from","x","index","delay","setInterval","prevProps","_this$props2","start","_this$state2","_this2","toConsumableArray","flexBasis","ref","onClick","handleClick","maxWidth","renderSquares","App","selectMode","message","buttonText","disabled","handleChange","event","target","value","defineProperty","showMessage","msg","axios","get","credentials","headers","Access-Control-Allow-Origin","Accept","Content-Type","then","res","data","crossdomain","settings","e","preventDefault","easyMode","normalMode","hardMode","elem","_data$elem","_this3","Container","Form","onSubmit","Row","form","Col","md","Input","type","onChange","placeholder","Button","src_Game","src_DataTable","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6a49125a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Table } from 'reactstrap';\n\nclass DataTable extends Component {\n  renderData() {\n    const { winners } = this.props;\n    return (\n      winners.map((item) => {\n        const { winner, date, id } = item;\n        return(\n          <tr key={id}>\n            <td>{winner}</td>\n            <td>{date}</td>\n          </tr>\n        )\n      })\n    )\n  }\n\n  render() {\n    console.log(this.props.winners);\n    return(\n      <div className=\"dataTable\">\n        <h2>Leader Board</h2>\n        <Table bordered>\n          <tbody>\n            {\n              this.renderData()\n            }\n          </tbody>\n        </Table>\n      </div>\n    )\n  }\n}\n\nexport default DataTable;\n","import React, { Component } from \"react\";\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.myRef = [];\n    this.state = {\n      squares: Array.from(\n        Array(props.field * props.field),\n        (x, index) => index\n      ),\n      userScores: 0,\n      computerScores: 0,\n      highlight: undefined,\n      clicked: false\n    };\n  }\n  componentDidMount() {\n    const { delay } = this.props;\n    this.intervalId = setInterval(this.timer, delay);\n  }\n  componentDidUpdate(prevProps) {\n    const { start, delay, field } = this.props;\n    if (start && start !== prevProps.start) {\n      this.intervalId = setInterval(this.timer, delay);\n      this.setState({\n        squares: Array.from(Array(field * field), (x, index) => index),\n        computerScores: 0,\n        userScores: 0,\n        highlight: undefined\n      });\n      for (let i = 0; i < field * field; i++) {\n        this.myRef[i].style.backgroundColor = \"white\";\n      }\n    }\n  }\n  componentWillUnmount() {\n    clearInterval(this.intervalId);\n  }\n  timer = () => {\n    const {\n      squares,\n      computerScores,\n      userScores,\n      clicked,\n      highlight\n    } = this.state;\n    const { field, userName, onShowMessage } = this.props;\n    const halfSquares = ((field * field) / 2).toFixed();\n    const item = squares[Math.floor(Math.random() * squares.length)];\n\n    const finishGame = (name, color) => {\n      clearInterval(this.intervalId);\n      this.myRef[highlight].style.backgroundColor = color;\n      onShowMessage(`${name} won`);\n    };\n    if (computerScores >= halfSquares) {\n      finishGame(\"Computer\", \"red\");\n    } else if (userScores >= halfSquares) {\n      finishGame(userName, \"green\");\n    } else {\n      this.myRef[item].style.backgroundColor = \"blue\";\n      for (var i = 0; i < squares.length; i++) {\n        if (squares[i] === item) {\n          squares.splice(i, 1);\n        }\n      }\n      this.setState({\n        highlight: item,\n        squares,\n        clicked: false\n      });\n      if (!clicked) {\n        this.setState({\n          computerScores: computerScores + 1\n        });\n        if (highlight !== undefined) {\n          this.myRef[highlight].style.backgroundColor = \"red\";\n        }\n      }\n    }\n  };\n\n  handleClick(index) {\n    const { userScores, highlight } = this.state;\n    if (index === highlight) {\n      this.myRef[index].style.backgroundColor = \"green\";\n      this.setState({\n        userScores: userScores + 1,\n        clicked: true\n      });\n    }\n  }\n  renderSquares(field) {\n    let squares = [...Array(field * field)];\n    return squares.map((item, index) => {\n      return (\n        <div\n          className=\"game-cell\"\n          key={index}\n          style={{ flexBasis: `${100 / field}%` }}\n          ref={ref => {\n            this.myRef[index] = ref;\n            return true;\n          }}\n          onClick={() => this.handleClick(index)}\n        >\n          <div className=\"game-item\" />\n        </div>\n      );\n    });\n  }\n  render() {\n    const { field } = this.props;\n    return (\n      <div\n        className=\"game-container\"\n        style={{\n          maxWidth: `${\n            field === 5 ? \"320px\" : field === 10 ? \"480px\" : \"640px\"\n          }`\n        }}\n      >\n        {this.renderSquares(field)}\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React, { Component } from \"react\";\nimport { Container, Row, Col, Form, Button, Input } from \"reactstrap\";\nimport axios from \"axios\";\n\nimport DataTable from \"./DataTable\";\nimport Game from \"./Game\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    userName: \"\",\n    selectMode: \"\",\n    message: \"\",\n    buttonText: \"Play\",\n    winners: [],\n    field: undefined,\n    delay: undefined,\n    start: false,\n    disabled: false,\n  };\n\n  componentDidMount() {\n    axios\n      .get(`https://starnavi-frontend-test-task.herokuapp.com/winners`, {\n        credentials: \"same-origin\",\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\",\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        }\n      })\n      .then(res => {\n        const winners = res.data;\n        this.setState({ winners });\n      });\n    axios\n      .get(`https://starnavi-frontend-test-task.herokuapp.com/game-settings`, {\n        crossdomain: true,\n        headers: {'Access-Control-Allow-Origin': '*'},\n      })\n      .then(res => {\n        const settings = res.data;\n        console.log('settings', settings)\n        // this.setState({ winners });\n      });\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    const { userName, selectMode } = this.state;\n    if (userName !== \"\" && selectMode !== \"\") {\n      // axios.get(`https://starnavi-frontend-test-task.herokuapp.com/game-settings`, {\n      //   credentials: \"same-origin\",\n      //   headers: {\n      //     Accept: 'application/json',\n      //     'Content-Type': 'application/json',\n      //   }\n      // })\n      //   .then(res => {\n      //     const field = res.data;\n      //     this.setState({ field });\n      //     console.log('field', field);\n      //   })\n      // fetch('https://starnavi-frontend-test-task.herokuapp.com/game-settings', {\n      //   method: 'GET',\n      //   headers: {\n      //     'Accept': 'application/json',\n      //     'Content-Type': 'application/json',\n      //   }\n      // })\n      // .then(response => response.json())\n      // .then(field => console.log('field', field));\n      const data = {\n        easyMode: {\n          field: 5,\n          delay: 2000\n        },\n        normalMode: {\n          field: 10,\n          delay: 1000\n        },\n        hardMode: {\n          field: 15,\n          delay: 500\n        }\n      };\n      for (let elem in data) {\n        if (elem === selectMode) {\n          const { field, delay } = data[elem];\n          this.setState({\n            field,\n            delay,\n            start: true ,\n            disabled: true ,\n            message: ''\n          });\n        }\n      }\n    }\n  }\n\n  handleChange = event => {\n    const { target } = event;\n    const { name, value } = target;\n    this.setState({\n      [name]: value\n    });\n  };\n\n  showMessage = msg => {\n    this.setState({\n      message: msg,\n      buttonText: \"Play Again\",\n      start: false,\n      disabled: false,\n    });\n  };\n\n  render() {\n    const {\n      winners,\n      message,\n      field,\n      delay,\n      userName,\n      start,\n      buttonText,\n      disabled\n    } = this.state;\n    return (\n      <div className=\"App\">\n        <Container>\n          <Form onSubmit={e => this.onSubmit(e)} className=\"mainForm\">\n            <Row form>\n              <Col md={5} className=\"mb-2\">\n                <Input\n                  type=\"select\"\n                  name=\"selectMode\"\n                  onChange={e => this.handleChange(e)}\n                >\n                  <option value=\"\">Pick game mode</option>\n                  <option value=\"easyMode\">Easy</option>\n                  <option value=\"normalMode\">Normal</option>\n                  <option value=\"hardMode\">Hard</option>\n                </Input>\n              </Col>\n              <Col md={5} className=\"mb-2\">\n                <Input\n                  type=\"text\"\n                  name=\"userName\"\n                  value={userName}\n                  placeholder=\"Enter your name\"\n                  onChange={e => this.handleChange(e)}\n                />\n              </Col>\n              <Col md={2}>\n                <Button\n                  disabled={disabled}\n                >\n                  {buttonText}\n                </Button>\n              </Col>\n            </Row>\n          </Form>\n          <Row>\n            <Col>\n              <div className=\"message\">\n                {message.length ? <h3>{message}</h3> : null}\n              </div>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              {\n                ((field !== undefined) || (delay !== undefined))\n                ?\n                <Game\n                  field={field}\n                  delay={delay}\n                  userName={userName}\n                  onShowMessage={this.showMessage}\n                  start={start}\n                />\n                :\n                null\n              }\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <DataTable winners={winners} />\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}