{"version":3,"sources":["DataTable.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["DataTable","React","memo","_ref","winners","react_default","a","createElement","className","Table","bordered","map","item","winner","date","id","key","Game","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","timer","_this$state","state","squares","computerScores","userScores","clicked","highlight","_this$props","field","userName","onShowMessage","halfSquares","Math","pow","toFixed","floor","random","length","finishGame","name","color","clearInterval","intervalId","myRef","style","backgroundColor","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","i","value","splice","err","return","setState","Array","from","x","index","delay","setInterval","prevProps","_this$props2","start","_this$state2","_this2","toConsumableArray","flexBasis","concat","ref","onClick","handleClick","maxWidth","renderSquares","Component","App","selectMode","message","buttonText","settings","disabled","handleChange","event","target","defineProperty","showMessage","Date","year","getFullYear","month","getMonth","day","getDate","hours","getHours","minutes","getMinutes","formattedDate","axios","post","headers","Accept","Content-Type","then","res","console","log","getWinners","get","crossdomain","Access-Control-Allow-Origin","data","_this3","e","preventDefault","elem","_settings$elem","_this4","Container","Form","onSubmit","Row","form","Col","md","Input","type","onChange","placeholder","Button","src_Game","src_DataTable","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c1e74a46.chunk.js","sourcesContent":["import React from \"react\";\nimport { Table } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\n\nconst DataTable = React.memo(({ winners }) => {\n  const renderData = () => {\n    return winners.map(item => {\n      const { winner, date, id } = item;\n      return (\n        <tr key={id}>\n          <td>{winner}</td>\n          <td>{date}</td>\n        </tr>\n      );\n    });\n  };\n  return (\n    <div className=\"dataTable\">\n      <h2>Leader Board</h2>\n      <Table bordered>\n        <tbody>{renderData()}</tbody>\n      </Table>\n    </div>\n  );\n});\n\nDataTable.propTypes = {\n  winners: PropTypes.array\n};\n\nexport default DataTable;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.myRef = [];\n    this.state = {\n      squares: Array.from(Array(props.field ** 2), (x, index) => index),\n      userScores: 0,\n      computerScores: 0,\n      highlight: null,\n      clicked: false\n    };\n  }\n  componentDidMount() {\n    const { delay } = this.props;\n    this.intervalId = setInterval(this.timer, delay);\n  }\n  componentDidUpdate(prevProps) {\n    const { start, delay, field } = this.props;\n    if (start && start !== prevProps.start) {\n      this.intervalId = setInterval(this.timer, delay);\n      this.setState({\n        squares: Array.from(Array(field ** 2), (x, index) => index),\n        computerScores: 0,\n        userScores: 0,\n        highlight: null\n      });\n      for (let i = 0; i < field ** 2; i++) {\n        this.myRef[i].style.backgroundColor = \"white\";\n      }\n    }\n  }\n  componentWillUnmount() {\n    clearInterval(this.intervalId);\n  }\n  timer = () => {\n    const {\n      squares,\n      computerScores,\n      userScores,\n      clicked,\n      highlight\n    } = this.state;\n    const { field, userName, onShowMessage } = this.props;\n    const halfSquares = (field ** 2 / 2).toFixed();\n    const item = squares[Math.floor(Math.random() * squares.length)];\n\n    const finishGame = (name, color) => {\n      clearInterval(this.intervalId);\n      this.myRef[highlight].style.backgroundColor = color;\n      onShowMessage(name);\n    };\n    if (computerScores >= halfSquares) {\n      finishGame(\"Computer\", \"red\");\n    } else if (userScores >= halfSquares) {\n      finishGame(userName, \"green\");\n    } else {\n      this.myRef[item].style.backgroundColor = \"blue\";\n      for (const i of squares) {\n        if (squares[i] === item) {\n          squares.splice(i, 1);\n        }\n      }\n      this.setState({\n        highlight: item,\n        squares,\n        clicked: false\n      });\n      if (!clicked) {\n        this.setState({\n          computerScores: computerScores + 1\n        });\n        if (highlight) {\n          this.myRef[highlight].style.backgroundColor = \"red\";\n        }\n      }\n    }\n  };\n\n  handleClick(index) {\n    const { userScores, highlight } = this.state;\n    if (index === highlight) {\n      this.myRef[index].style.backgroundColor = \"green\";\n      this.setState({\n        userScores: userScores + 1,\n        clicked: true\n      });\n    }\n  }\n  renderSquares(field) {\n    let squares = [...Array(field ** 2)];\n    return squares.map((item, index) => {\n      return (\n        <div\n          className=\"game-cell\"\n          key={index}\n          style={{ flexBasis: `${100 / field}%` }}\n          ref={ref => {\n            this.myRef[index] = ref;\n            return true;\n          }}\n          onClick={() => this.handleClick(index)}\n        >\n          <div className=\"game-item\" />\n        </div>\n      );\n    });\n  }\n  render() {\n    const { field } = this.props;\n    return (\n      <div\n        className=\"game-container\"\n        style={{\n          maxWidth: `${\n            field === 5 ? \"320px\" : field === 10 ? \"480px\" : \"640px\"\n          }`\n        }}\n      >\n        {this.renderSquares(field)}\n      </div>\n    );\n  }\n}\n\nGame.propTypes = {\n  delay: PropTypes.number,\n  start: PropTypes.bool,\n  field: PropTypes.number,\n  userName: PropTypes.string,\n  onShowMessage: PropTypes.func\n};\n\nexport default Game;\n","import React, { Component } from \"react\";\nimport { Container, Row, Col, Form, Button, Input } from \"reactstrap\";\nimport axios from \"axios\";\n\nimport DataTable from \"./DataTable\";\nimport Game from \"./Game\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    userName: \"\",\n    selectMode: \"\",\n    message: \"\",\n    buttonText: \"Play\",\n    winners: [],\n    settings: {},\n    field: null,\n    delay: null,\n    start: false,\n    disabled: false\n  };\n\n  componentDidMount() {\n    this.getWinners();\n    axios\n      .get(`https://starnavi-frontend-test-task.herokuapp.com/game-settings`, {\n        crossdomain: true,\n        headers: { \"Access-Control-Allow-Origin\": \"*\" }\n      })\n      .then(res => {\n        const settings = res.data;\n        this.setState({ settings });\n      });\n  }\n\n  getWinners() {\n    axios\n      .get(`https://starnavi-frontend-test-task.herokuapp.com/winners`, {\n        crossdomain: true,\n        headers: { \"Access-Control-Allow-Origin\": \"*\" }\n      })\n      .then(res => {\n        const winners = res.data;\n        this.setState({ winners });\n      });\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    const { userName, selectMode, settings } = this.state;\n    if (userName !== \"\" && selectMode !== \"\") {\n      for (let elem in settings) {\n        if (elem === selectMode) {\n          const { field, delay } = settings[elem];\n          this.setState({\n            field,\n            delay,\n            start: true,\n            disabled: true,\n            message: \"\"\n          });\n        }\n      }\n    }\n  }\n\n  handleChange = event => {\n    const { target } = event;\n    const { name, value } = target;\n    this.setState({\n      [name]: value\n    });\n  };\n\n  showMessage = name => {\n    const date = new Date();\n    const year = date.getFullYear();\n    const month = date.getMonth();\n    const monthsNamed = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\"\n    ];\n    const day = date.getDate();\n    const hours = date.getHours();\n    const minutes = date.getMinutes();\n    const formattedDate = `${hours}:${minutes}; ${day} ${\n      monthsNamed[month]\n    } ${year}`;\n    this.setState({\n      message: `${name} won`,\n      buttonText: \"Play Again\",\n      start: false,\n      disabled: false\n    });\n    axios\n      .post(\n        `https://12starnavi-frontend-test-task.herokuapp.com/winners`,\n        { winner: name, date: formattedDate },\n        {\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\"\n          }\n        }\n      )\n      .then(res => {\n        console.log(res);\n        this.getWinners();\n      });\n  };\n\n  render() {\n    const {\n      winners,\n      message,\n      field,\n      delay,\n      userName,\n      start,\n      buttonText,\n      disabled\n    } = this.state;\n    return (\n      <div className=\"App\">\n        <Container>\n          <Form onSubmit={e => this.onSubmit(e)} className=\"mainForm\">\n            <Row form>\n              <Col md={5} className=\"mb-2\">\n                <Input\n                  type=\"select\"\n                  name=\"selectMode\"\n                  onChange={e => this.handleChange(e)}\n                >\n                  <option value=\"\">Pick game mode</option>\n                  <option value=\"easyMode\">Easy</option>\n                  <option value=\"normalMode\">Normal</option>\n                  <option value=\"hardMode\">Hard</option>\n                </Input>\n              </Col>\n              <Col md={5} className=\"mb-2\">\n                <Input\n                  type=\"text\"\n                  name=\"userName\"\n                  value={userName}\n                  placeholder=\"Enter your name\"\n                  onChange={e => this.handleChange(e)}\n                />\n              </Col>\n              <Col md={2}>\n                <Button disabled={disabled}>{buttonText}</Button>\n              </Col>\n            </Row>\n          </Form>\n          <Row>\n            <Col>\n              <div className=\"message\">\n                {message.length > 0 && <h3>{message}</h3>}\n              </div>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              {(field || delay) && (\n                <Game\n                  field={field}\n                  delay={delay}\n                  userName={userName}\n                  onShowMessage={this.showMessage}\n                  start={start}\n                />\n              )}\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <DataTable winners={winners} />\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}